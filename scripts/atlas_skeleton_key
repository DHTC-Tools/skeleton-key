#!/usr/bin/python

import optparse, os, sys, getpass, re, urlparse, time, shutil, urllib2, ConfigParser

VERSION = '0.10'


def validate_options(options):
  """
  Check options and make sure that options are reasonable

  returns True if options are valid, False otherwise
  """
  valid = True
  if options.user_proxy == '' and not os.path.isfile(get_default_proxy()):
    sys.stderr.write("Default proxy at %s not present, " \
                     "exiting\n" % get_default_proxy())
    valid = False
  elif options.user_proxy != '' and not os.path.isfile(options.user_proxy):
    sys.stderr.write("User proxy at %s not present, " \
                     "exiting\n" % options.user_proxy)
    valid = False
  
  if options.app_url == '':
    sys.stderr.write("You must give an application url\n")
    valid = False
  else:
    try:
      url_handle = urllib2.urlopen(options.app_url)
      if url_handle.code != 200:
        sys.stderr.write("Can't access application tarball at %s, " \
                         "exiting...\n" % options.app_url)
        valid = False
      url_handle.close()
    except urllib2.HTTPError:
      sys.stderr.write("Can't access application tarball at %s, " \
                       "exiting...\n" % options.app_url)
      valid = False
  
  return valid
     

def get_default_proxy():
  """
  Return default user proxy filename
  """
  return os.path.join('/', 'tmp', "x509up_u%s" % os.getuid())

def get_user_proxy(options):
  """
  If specified get user proxy information to place in the job wrapper
  """
  try:
    if options.user_proxy == '':
      options.user_proxy  = os.path.join('/', 'tmp', "x509up_u%s" % os.getuid())
    proxy = open(options.user_proxy, 'r').read()
    return proxy
  except:
    sys.stderr.write("Can't read user proxy at %s\n" % options.user_proxy)
    sys.exit(1)

def parse_args(job_args):
  """
  Parse string with job arguments into a list for inclusion in job wrapper
  """
  args = []
  if job_args == "":
    return '""'
  tokens = job_args.split(' ')
  double_quotes = False
  single_quotes = False
  cur_token = ''
  for token in tokens:
    if not double_quotes and not single_quotes:
      if token[0] not in ('"', "'"):
        args.append(token)
        cur_token = ''
      elif token[0] == '"':
        double_quotes = True
        cur_token = token[1:]
      elif token[0] == "'":
        single_quotes = True
        cur_token = token[1:]
    elif double_quotes:
      if token[-1] != '"':
        cur_token += " %s" % token
      elif token[-2:] == '\\"':
        cur_token += " %s\"" % token[:-2]        
      else:
        cur_token += " %s" % token[:-1]
        args.append(cur_token)
        cur_token = ''
        double_quotes = False
    elif single_quotes:
      if token[-1] != "'":
        cur_token += " %s" % token
      elif token[-2:] == "\\'":
        cur_token += " %s'" % token[:-2]
      else:
        cur_token += " %s" % token[:-1]
        args.append(cur_token)
        cur_token = ''
        single_quotes = False
  return " ".join(args)

def get_wrapper_template():
  """
  Check the parrot config and get the wrapper template based on that
  """
  wrapper_location = None
  config = ConfigParser.SafeConfigParser()
  config.read(os.path.expanduser('~/.skeletonkey.config'))
  if (config.has_section('Installation') and
      config.has_option('Installation', 'location')):
    wrapper_location =  os.path.join(config.get('Installation', 'location'), 
                                     'templates',
                                     'run_atlas_job.py')
  else:
    sys.stderr.write("Can't find location of wrapper template\n")
    sys.exit(1)
  if (not os.path.exists(wrapper_location) or 
      not os.path.isfile(wrapper_location)):
    sys.stderr.write("Wrapper template not in specified " \
                     "location: %s\n" % wrapper_location)
    sys.exit(1)
  return open(wrapper_location).read()

def create_job_wrapper(output_file, options):
  """Generate a job wrapper"""
  try:
    template = get_wrapper_template()

    template = template.replace('%%%APP_URL%%%', options.app_url)
    template = template.replace('%%%JOB_SCRIPT%%%',  options.app_script)
    template = template.replace('%%%JOB_ARGS%%%', parse_args(options.app_args))
    
    proxy = get_user_proxy(options)
    template = template.replace('%%%USER_PROXY%%%', proxy)

    open(output_file, 'w').write(template)
    os.chmod(output_file, 0700)
  except Exception, e:
    sys.stderr.write("Caught exception while writing job wrapper:\n%s\n" % e)
    return False
  return True

if __name__ == '__main__':
  parser = optparse.OptionParser(usage='Usage: %prog [options] arg1 arg2', 
                                 version='%prog ' + VERSION)
  
  parser.add_option('-o',
                    '--output',
                    action='store',
                    dest='output_file',
                    default='run_job.py',
                    help='Name of job wrapper file generated ')
  parser.add_option('-p',
                    '--user-proxy',
                    action='store',
                    dest='user_proxy',
                    default='',
                    help='Location of X.509 user proxy')
  parser.add_option('-a',
                    '--application-arguments',
                    action='store',
                    dest='app_args',
                    default='',
                    help='Arguments to pass to application')
  parser.add_option('-t',
                    '--application-tarball',
                    action='store',
                    dest='app_url',
                    default='',
                    help='URL to application tarball')
  parser.add_option('-s',
                    '--application-script',
                    action='store',
                    dest='app_script',
                    default='',
                    help='Script within tarball to run')
  
  (options, args) = parser.parse_args()
  
  
  validate_options(options)
  
  if not create_job_wrapper(options.output_file, options):
    sys.stderr.write("Can't write job wrapper\n")
    sys.exit(1)

